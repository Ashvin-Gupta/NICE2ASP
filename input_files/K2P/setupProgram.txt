Given a textual descriptions of a patients and an answer set programming program, return the elements in the body of the rules that are required for rules to fire in the program for that specific patient.
Make sure that everything in the patient description is presented properly from the elements that appear in the body of the rules.

For example:

Rules:
consider("CT_scan") :- age(X), have("unexplained_weight_loss"), have("abdominal_pain"), X>60.
consider("CT_scan") :- age(X), have("unexplained_weight_loss"), have("new_onset_diabetes"), X>60.
offer("pancreatic_protocol_ct") :- have("pancreatic_abnormalities"), not have("jaundice").
1 {{offer("FDG-PET/CT"); offer("EUS_with_tissue")}} 2 :- findings_from_procedure("pancreatic_protocol_ct", "unclear_diagnosis"), offered("pancreatic_protocol_CT"), have("pancreatic_abnormalities"), not have("jaundice").

Patient 1 description:
Patient is 63 year old male. Symptoms include abdominal pain, diabetes. 
On CT there were pancreatic abnormalities with a mass in the neck of the pancreas and the diagnosis unclear. 
On EUS there was desmoplastic ductal adenocarcinoma and on biopsy there was MMR wild-type.

Return:
age(63).
have("abdominal_pain").
have("diabetes").
have("pancreatic_abnormalities").
have("MMR_wild_type").
findings_from_procedure("pancreatic_protocol_ct", "unclear_diagnosis").
have(cancer("pancreas")).


For this task you should first analyse the rules and look at all of the elements that are present in the body of the rules. 
Then for each patient description you should recognise if any of the constants appear in the body of the rules you have just analysed.
From there you should write the predicate and constants that appear in the program.

Return your answers in the format:
Patient 1:
element 1 for patient 1.
element 2 for patient 1.
...
element n for patient 1.

Patient 2:
element 1 for patient 2.
element 2 for patient 2.
...
element n for patient 2.

Actual Rules:
{rules}

Patient descriptions:
{descriptions}